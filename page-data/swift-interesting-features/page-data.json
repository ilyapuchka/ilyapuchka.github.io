{"componentChunkName":"component---src-templates-blog-post-js","path":"/swift-interesting-features/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"b68e0bb1-3ce5-534f-a0b9-d6b6aa330ac2","excerpt":"or What Swift Language Guide do not tell you. This post contains the list of interesting features of Swift that I find while using it. To make it moreâ€¦","html":"<p>or What Swift Language Guide do not tell you.</p>\n<p>This post contains the list of interesting features of Swift that I find while using it. To make it more interactive I've put it in a playground that you can checkout <a href=\"https://github.com/ilyapuchka/SwiftFeatures\">here</a>. The list is intended to be updated in future. If you have something you want to share, pull requests are welcome.</p>\n<p>Contents:</p>\n<ol>\n<li>Var in for-in loop</li>\n<li>Property observers for local variables</li>\n<li>~= operator</li>\n<li>Curried functions</li>\n<li>Subscript with more than one parameter (by <a href=\"https://twitter.com/AirspeedSwift/status/626701244455895044\">AirspeedVelocity</a>)</li>\n</ol>\n<h4>Var in for-in loop</h4>\n<p>If you have an array of reference type objects you can mutate them in a loop just by adding <code>var</code> before loop variable. This will work only for reference types as value types are copied on assignment and so the items in array will be not modified. If you have value types though you will be able to modify loop variable inside the loop. It will work pretty much like mutable function arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token comment\">// Value type</span>\n    <span class=\"token keyword\">var</span> valuesArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> valueItem<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> valuesArray <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">++</span>valueItem <span class=\"token comment\">// 2, 3, 4</span>\n    <span class=\"token punctuation\">}</span>\n    valuesArray <span class=\"token comment\">// 1, 2, 3</span>\n    \n    <span class=\"token comment\">// Reference type</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n        <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> value<span class=\"token punctuation\">:</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> objectsArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> objectsArray <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">++</span>item<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// 2, 3, 4</span>\n    <span class=\"token punctuation\">}</span>\n    objectsArray <span class=\"token comment\">// 2, 3, 4</span></code></pre></div>\n<p>####Property observers for local variables</p>\n<p>This does not work in plyagrounds but give it a try in a real project and you will see \"Will set 1\" and \"Did set 1\":</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">var</span> <span class=\"token keyword\">some</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">willSet</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Will set </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">newValue</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">didSet</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Did set </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">some</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">some</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4><code>~=</code> operator</h4>\n<p>This is an expression matching operator. This is what <code>switch</code> statement uses for pattern matching. Outside <code>switch</code> you can use it i.e to find out if Range contains value.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">let</span> <span class=\"token keyword\">some</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">5</span> <span class=\"token operator\">~=</span> <span class=\"token keyword\">some</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">some</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> is between 0 and 5\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can even override this operator like any other to crate some crazy things. For more information check out <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Patterns.html#//apple_ref/doc/uid/TP40014097-CH36-XID_909\">docs</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">typealias</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">UInt</span>\n    \n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Gender</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Male</span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">Female</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n        <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Age</span>\n        <span class=\"token keyword\">var</span> gender<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gender</span>\n        \n        <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Age</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> lhs<span class=\"token punctuation\">.</span>age <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> lhs<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>gender\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> <span class=\"token class-name\">Ilya</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Ilya\"</span></span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Male</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> <span class=\"token class-name\">Marina</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Marina\"</span></span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Female</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token class-name\">Ilya</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token operator\">~=</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> pattern <span class=\"token operator\">==</span> value\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">switch</span> me <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Ilya</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi, man!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Marina</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi, gorgeous!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token operator\">~=</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">:</span><span class=\"token class-name\">Range</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Age</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> pattern <span class=\"token operator\">~=</span> value<span class=\"token punctuation\">.</span>age\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">switch</span> me <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">18</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"You are too young for that\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">18</span><span class=\"token operator\">..&lt;</span><span class=\"token class-name\">UInt</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Do what ever you want\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Unfortunatelly complier will not let you to match your class against tuple or enum, which would be cool. But you can still use ~= directly if you define it with tuple or enum as a pattern to match. To make it better swap right and left hand statements. This can be fun but I don't see very good usecases for that.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">func</span> <span class=\"token operator\">~=</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gender</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> pattern<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">==</span> value\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">switch</span> me <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token omit keyword\">_</span> <span class=\"token keyword\">where</span> me <span class=\"token operator\">~=</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Male</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi, man!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token omit keyword\">_</span> <span class=\"token keyword\">where</span> me <span class=\"token operator\">~=</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Female</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi, gorgeous!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>####Curried functions</p>\n<p>Instance methods in Swift are actually curried functions. You can store it in variable and apply to different instances. Checkout <a href=\"http://oleb.net/blog/2014/07/swift-instance-methods-curried-functions/\">this post</a> by Ole Begemann for one of use cases for that feature.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">extension</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">growOlder</span><span class=\"token punctuation\">(</span>years<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">+=</span> years\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> growOlder <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>growOlder\n    <span class=\"token function\">growOlder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ilya</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">growOlder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Marina</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>####Subscript with multiple parameters (by <a href=\"https://twitter.com/AirspeedSwift/status/626701244455895044\">AirspeedVelocity</a>)</p>\n<p>Did you know that you can provide more than one parameter to subscript? Also ++ will not just change returned value but will also write it back to that subscript. It's possible because subscript parameters are <code>inout</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">extension</span> <span class=\"token class-name\">Dictionary</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">subscript</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">,</span> or or<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Value</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> or\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newValue\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    dict<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">?++</span> <span class=\"token comment\">// 1</span>\n    dict <span class=\"token comment\">// [\"a\": 2]</span>\n    \n    dict<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"b\"</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">?++</span> <span class=\"token comment\">// nil</span>\n    dict <span class=\"token comment\">// [\"a\": 2]</span>\n    \n    dict<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"c\"</span></span><span class=\"token punctuation\">,</span> or<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span> <span class=\"token comment\">// 3</span>\n    dict <span class=\"token comment\">// [\"c\": 4, \"a\": 2]</span></code></pre></div>","fields":{"slug":"/swift-interesting-features/"},"frontmatter":{"id":"5b6f5a3a9d28c70f0f015f61","title":"Swift interesting features","date":"April 19, 2015","description":"or What Swift Language Guide do not tell you.","tags":"Swift"}},"previous":{"excerpt":"In this article I want to describe how I developed custom UITextView component in Swift using TextKit, Playgrounds and IBDesignable and IBInspectable directivesâ€¦","fields":{"slug":"/custom-uitextview-in-swift/"},"frontmatter":{"title":"Custom UITextView in Swift","date":"April 04, 2015"}},"next":{"excerpt":"This year I was lucky enougth to go to WWDC as part of Wire team. For me the most exciting stuff Apple introduced this year was Swift 2. I went almost to everyâ€¦","fields":{"slug":"/swift-2-part-1-2/"},"frontmatter":{"title":"Swift 2. Part 1.","date":"June 28, 2015"}}},"pageContext":{"id":"b68e0bb1-3ce5-534f-a0b9-d6b6aa330ac2","previousPostId":"ed4c5872-112e-562b-9154-9d9acb635f77","nextPostId":"947d8985-fb4f-5fb1-b005-65112b101ee5"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}