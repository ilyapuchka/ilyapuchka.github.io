{"componentChunkName":"component---src-templates-blog-post-js","path":"/swift5-string-interpolation/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"4cc51020-7b3b-5a1a-9bc6-396d7b045c6e","excerpt":"Strings are everywhere. We all use strings everyday. In Swift String is a very powerful type. One of the features it had available since the beginning is theâ€¦","html":"<p>Strings are everywhere. We all use strings everyday. In Swift <code>String</code> is a very powerful type. One of the features it had available since the beginning is the string interpolation. With it we can embed any Swift expression inside the string literal instead of concatenating strings manually.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"iOS Astronauts\"</span></span>\n<span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> <span class=\"token comment\">// \"Hello, iOS Astronauts\"</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name<span class=\"token punctuation\">.</span>count</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> <span class=\"token comment\">// \"Hello, 14\"</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> <span class=\"token comment\">// \"Hello, (Function)\"</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> <span class=\"token comment\">// \"Hello, Optional(\"Ilya\")\"</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">MyStruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> <span class=\"token comment\">// \"Hello, MyStruct()\"</span></code></pre></div>\n<p>But you'll say, we all already know that and there is nothing really exciting about that. But today let's see how string interpolation works exactly.</p>\n<p>For that standard library defines a protocol <code>ExpressibleByStringInterpolation</code>. This type was deprecated in Swift 3 so its details are now even stripped out of generated interface of standard library that you'll see in the Xcode, but we can find a cached version on swiftdoc.org<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. There you'll see that there are two constructors required by this protocol.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">ExpressibleByStringInterpolation</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>stringInterpolation strings<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>stringInterpolationSegment expr<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can also find there some details about how these constructors are being invoked.</p>\n<blockquote>\n<p>String interpolation is a multiple-step initialization process. When you use string interpolation, the following steps occur:</p>\n<p><em>1. The string literal is broken into pieces. Each segment of the string literal <strong>before</strong> , <strong>between</strong> , and <strong>after</strong> any included expressions, along with the individual expressions themselves, are passed to the <code>init(stringInterpolationSegment:)</code> initializer.</em></p>\n<p><em>2. The results of those calls are passed to the <code>init(stringInterpolation:)</code> initializer in the order in which they appear in the string literal.</em></p>\n</blockquote>\n<p>So essentially string interpolation is just a syntactic sugar that at compile type converts expression like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token string-literal\"><span class=\"token string\">\"hello </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">!\"</span></span></code></pre></div>\n<p>into a call like this<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolation<span class=\"token punctuation\">:</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolationSegment<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"hello \"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolationSegment<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolationSegment<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"!\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If we go through this generated code step by step then we see that first a string will be created with <code>hello</code> string, then another string will be created with a <code>name</code> value, and then another with <code>!</code> and only then all these strings will be passed as an array into the final constructor to create a final string.</p>\n<h2>What now?</h2>\n<p>Cool. But what now? Well, knowing that we can now make our own types conform to this procotol.</p>\n<p>Let's imagine we have a blog and we want to write our blog posts in Swift. Of course its not possible straight away as Swift is not a markup language and modern browsers down't understand it. But what if we convert our Swift code into the format that they can understand? For example Markdown or HTML?</p>\n<p>That we can do. What we want to achieve is to be able to write something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> blogPost<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Markup</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"...\"</span></span>\n\n<span class=\"token keyword\">let</span> markdow <span class=\"token operator\">=</span> <span class=\"token class-name\">Markdown</span><span class=\"token punctuation\">(</span>blogPost<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> html <span class=\"token operator\">=</span> <span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>blogPost<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's see how we can use string interpolation for that.</p>\n<h3>Demo 1 (<a href=\"https://github.com/ilyapuchka/SwiftStringInterpolation\">playground</a>)</h3>\n<p>So as you can see it's possible to use string interpolation for that but current design has few limitations (more details in the Swift Evolution proposal<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>):</p>\n<ol>\n<li>Doesn't allow extra parameters</li>\n<li>Accepts any type of values</li>\n<li>Lost segment semantics</li>\n<li>Memory overhead</li>\n</ol>\n<p>Also the best variant of our implementation that we could achieve is not perfect as well.</p>\n<ol>\n<li>We have to use free functions for each type of element to avoid specifying the type name.</li>\n<li>Function calls add extra brackets which only increase noise.</li>\n<li>Free functions pollute global namespace.</li>\n</ol>\n<p>But at the same time our implementation is already pretty powerful. We could even workaround some design limitation using free functions to be able to use parameters with interpolation.</p>\n<p>Over time people came up with interesting and more useful applications of that, for example for <a href=\"https://gist.github.com/brentdax/79fa038c0af0cafb52dd\">localization</a> <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>, which was possible even in Swift 2.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"blue\"</span></span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n\n<span class=\"token keyword\">let</span> localized<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LocalizableString</span> <span class=\"token operator\">=</span> \n    <span class=\"token string-literal\"><span class=\"token string\">\"Colorless </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">color</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> ideas sleep furiously.\"</span></span>\n<span class=\"token comment\">// format = NSLocalizedString(\"Colorless %@ ideas sleep furiously.\", comment: \"\")</span>\n<span class=\"token comment\">// String(format: format, arguments: [\"blue\"])</span>\n\n\n<span class=\"token keyword\">let</span> localized<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LocalizableString</span> <span class=\"token operator\">=</span> \n    <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">num<span class=\"token punctuation\">.</span><span class=\"token function\">formatted</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"%05d\"</span></span><span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> colorless green ideas sleep furiously.\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// format = NSLocalizedString(\"%05d colorless green ideas sleep furiously.\", comment: \"\")</span>\n<span class=\"token comment\">// String(format: format, arguments: [42])</span></code></pre></div>\n<h2>Swift 5</h2>\n<p>As we saw earlier <code>ExpressibleByStringInterpolation</code> was deprecated in Swift 3 with a promiss to be redesigned in Swift 4. And finally this redesign happened in Swift 5. So let's see what have changed.</p>\n<p>The basic concept is still the same, but the form has changed a bit. Now instead of aggregating interpolation segments in the type itself we need to use an associated type that should implement new <code>StringInterpolationProtocol</code>. The value of this type will be passsed into the new constructor <code>init(stringInterpolation:)</code> instead of array of individual segments. <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">ExpressibleByStringInterpolation</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ExpressibleByStringLiteral</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">associatedtype</span> <span class=\"token class-name\">StringInterpolation</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">StringInterpolationProtocol</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultStringInterpolation</span> <span class=\"token keyword\">where</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StringLiteralType</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StringInterpolation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StringLiteralType</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>stringInterpolation<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StringInterpolation</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This associated type needs to implement a new constructor <code>init(literalCapacity: Int, interpolationCount: Int)</code> that accepts the combined size of all literal segments and the number of interpolation segments. Then it needs to implement the new <code>func appendLiteral(_: StringLiteralType)</code> method that will be called with each string literal segment.And then we can define our own <code>func appendInterpolation(...)</code> methods for any other type of segment we want to support. <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">StringInterpolationProtocol</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">associatedtype</span> <span class=\"token class-name\">StringLiteralType</span> <span class=\"token punctuation\">:</span> _ExpressibleByBuiltinStringLiteral\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>literalCapacity<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> interpolationCount<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">appendLiteral</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> literal<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StringLiteralType</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">appendInterpolation</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These <code>appendInterpolation</code> methods can have any signature, they can accept any number of arguments, labeled or not, they can even <code>throw</code> and use generics, but they shouldn't return any value, or at least should be annotated with <code>@discardableResult</code> (on practice this is not enforced if there is any other <code>appendInterpolation</code> method that satisfies requirements) and they don't support trailing closures. There must be at least one <code>appendInterpolation</code> method Â satisfying these requirements.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">appendInterpolation</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> literal<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">appendInterpolation</span><span class=\"token punctuation\">(</span>\n    number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSNumber</span><span class=\"token punctuation\">,</span> \n    formatter<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSNumberFormatter</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">appendInterpolation</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Encodable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    js<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> \n    encoder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">JSONEncoder</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>At compile time interpolation will be restricted to these methods only, which allows to restrict types of values that can be interpolated instead of allowing any types of values as in the current design.</p>\n<p>We now also have a much better compiler support that will fail to compile if you use wrong types or wrong parameter names, though code completion does not quite work yet.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">js<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encoder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> âœ…\n\n<span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">js<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">Any</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encoder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> ðŸ›‘\n\n<span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">js<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encode<span class=\"token punctuation\">:</span> <span class=\"token class-name\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span> ðŸ›‘</code></pre></div>\n<p>The code generated by the compiler changed a bit as well, so instead of code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolation<span class=\"token punctuation\">:</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolationSegment<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"hello \"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolationSegment<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolationSegment<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"!\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>it will generate something that looks more like this<sup><a>[2:4]</a></sup>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>stringInterpolation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StringInterpolation</span><span class=\"token punctuation\">(</span>literalCapacity<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> interpolationCount<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">appendLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"hello \"</span></span><span class=\"token punctuation\">)</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">appendInterpolation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">appendLiteral</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> temp\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If we go through the process step by step again then we see that first the insteance of the associated interpolation type will be created, then the first literal segment will be appended to it, then the first interpolated value with the <code>name</code> value will be appended, then the last literal segment will be appened and finally the value of interpolation type will be passed into the constructor.</p>\n<p>Lets see now how our implementation will change with Swift 5.</p>\n<h3>Demo 2 (<a href=\"https://github.com/ilyapuchka/SwiftStringInterpolation\">playground</a>)</h3>\n<p>So with this new design we can simplify things we could do before, for example boolean expressions: <sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// old</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"Cheese Sandwich </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">isStarred <span class=\"token operator\">?</span> <span class=\"token string-literal\"><span class=\"token string\">\"(*)\"</span></span> <span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n\n<span class=\"token comment\">// new</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"Cheese Sandwich </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">:</span> isStarred<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"(*)\"</span></span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>Or can even create our own DSLs, like for string formatting<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup><sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token string-literal\"><span class=\"token string\">\"The price is $</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">cost<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"%.2f\"</span></span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n\n<span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> radix<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>binary</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>or attributed strings<sup id=\"fnref-6\"><a href=\"#fn-6\" class=\"footnote-ref\">6</a></sup>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token string-literal\"><span class=\"token string\">\"iOS Astronauts\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>or such special cases as GitHub Msarkdown: <sup id=\"fnref-7\"><a href=\"#fn-7\" class=\"footnote-ref\">7</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token string-literal\"><span class=\"token string\">\"See </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">issue<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>We can even go a bit further and implemt our own template DSL: <sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> hello<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Template</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"\"\n    </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">:</span> greeting<span class=\"token punctuation\">,</span> \n        then<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello\"</span></span><span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Goodbye\"</span></span>\n    </span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> names<span class=\"token punctuation\">,</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> loop <span class=\"token keyword\">in</span> \n        <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">loop<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">. </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\n    \"\"\"</span></span></code></pre></div>\n<p>Or a more type-safe version of string format: <sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> hello<span class=\"token punctuation\">:</span> <span class=\"token class-name\">StringFormatter</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token punctuation\">.</span>string</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">. Today is </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token punctuation\">.</span>date</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">.\"</span></span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"iOS Astronauts\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> âœ…\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"iOS Astronauts\"</span></span><span class=\"token punctuation\">)</span> ðŸ›‘</code></pre></div>\n<p>Some of these things will surely make it into the standard library and many 3rd party implementations will popup on GitHub and I hope now you are excited as me about this small but great Swift feature and new opportunities it offers.</p>\n<h3>One more thing</h3>\n<p>There is also one small but very useful improvement in Swift 5 not directly related to string interpolation, but one that makes it even easier to use. Now you can use <code>#</code> to tell Swift that quotes and back slashes in your string are actually literals. With that when you want to use string interpolation you need to add the same number of <code>#</code> . With this you no longer need to use <code>\\</code> to escape characters, which is a big deal when dealing for example with regular expressions <sup id=\"fnref-9\"><a href=\"#fn-9\" class=\"footnote-ref\">9</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// old</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"&lt;a href=\\\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">url</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\\\" title=\\\"Apple Developer\\\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// new</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">#\"&lt;a href=\"</span><span class=\"token interpolation-punctuation punctuation\">\\#(</span><span class=\"token interpolation\">url</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\" title=\"Apple Developer\">\"#</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://swiftdoc.org/v3.0/protocol/expressiblebystringinterpolation/\">https://swiftdoc.org/v3.0/protocol/expressiblebystringinterpolation/</a><a href=\"#fnref-1\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-2\"><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md\">https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md</a><a href=\"#fnref-2\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-3\"><a href=\"https://gist.github.com/brentdax/79fa038c0af0cafb52dd\">https://gist.github.com/brentdax/79fa038c0af0cafb52dd</a><a href=\"#fnref-3\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-4\"><a href=\"https://ericasadun.com/2018/12/12/the-beauty-of-swift-5-string-interpolation/\">https://ericasadun.com/2018/12/12/the-beauty-of-swift-5-string-interpolation/</a><a href=\"#fnref-4\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-5\"><a href=\"https://ericasadun.com/2018/12/14/more-fun-with-swift-5-string-interpolation-radix-formatting/\">https://ericasadun.com/2018/12/14/more-fun-with-swift-5-string-interpolation-radix-formatting/</a><a href=\"#fnref-5\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-6\"><a href=\"http://alisoftware.github.io/swift/2018/12/16/swift5-stringinterpolation-part2/\">http://alisoftware.github.io/swift/2018/12/16/swift5-stringinterpolation-part2/</a><a href=\"#fnref-6\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-7\"><a href=\"http://alisoftware.github.io/swift/2018/12/15/swift5-stringinterpolation-part1/\">http://alisoftware.github.io/swift/2018/12/15/swift5-stringinterpolation-part1/</a><a href=\"#fnref-7\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-8\"><a href=\"https://github.com/ilyapuchka/Interplate\">https://github.com/ilyapuchka/Interplate</a><a href=\"#fnref-8\" class=\"footnote-backref\">â†©</a></li>\n<li id=\"fn-9\"><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md\">https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md</a><a href=\"#fnref-9\" class=\"footnote-backref\">â†©</a></li>\n</ol>\n</div>","fields":{"slug":"/swift5-string-interpolation/"},"frontmatter":{"id":"5c5a181fe50b131c1451e18a","title":"Swift 5 string interpolation","date":"February 06, 2019","description":"Strings are everywhere. We all use strings everyday. In Swift `String` is a very powerful type. One of the features it had available since the beginning is the string interpolation. With it we can embed any Swift expression inside the string literal instead of concatenating strings manually.","tags":""}},"previous":{"excerpt":"Some time ago there was an explosion of articles and talks in the iOS community about \"unidirectional flow\" architectures, inspired by Redux library fromâ€¦","fields":{"slug":"/implementing-features-with-reactivefeedback/"},"frontmatter":{"title":"Implementing features with ReactiveFeedback","date":"November 07, 2018"}},"next":{"excerpt":"Nowadays Slack, some kind of CI and often Fastlane are default tools in a toolset of iOS developers. These tools serve their own purposes well, but wouldn'tâ€¦","fields":{"slug":"/making-slack-ci-and-fastlane-work-together/"},"frontmatter":{"title":"Making Slack, CircleCI and Fastlane work together","date":"June 08, 2019"}}},"pageContext":{"id":"4cc51020-7b3b-5a1a-9bc6-396d7b045c6e","previousPostId":"182752c7-174c-5e7c-92a7-7d348e6a1150","nextPostId":"712711eb-f3b8-5566-828a-85a86b7717b2"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}