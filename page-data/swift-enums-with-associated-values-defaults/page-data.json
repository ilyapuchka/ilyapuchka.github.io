{"componentChunkName":"component---src-templates-blog-post-js","path":"/swift-enums-with-associated-values-defaults/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"8240773d-746b-594a-97b1-1fdeddbdffdb","excerpt":"In Swift enums are much more powerful than we got used to in other languages. One of the features that makes them more interesting to use is associated valuesâ€¦","html":"<p>In Swift enums are much more powerful than we got used to in other languages. One of the features that makes them more interesting to use is associated values - values that each instance of enum case can carry along with it. We can not have stored properties in the enum, so associated values is basically the only way to store additional data with enum value. Creating an enum value with associated value has a similar semantics as a method call. The difference is - we can not define defaults for parameters which represent associated values.</p>\n<p>Here is a real-life example. I was implementing a custom popover presentation for which I have a relative position, view to present popover from and an inset from it along with several other parameters. First I had all of these properties defined as a separate method parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PopoverPresentationController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>presentedViewController<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewController</span><span class=\"token punctuation\">,</span>\n                presenting presentingViewController<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewController</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n                position<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span>\n                inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n                fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span>\n                passThrough<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                dimBackground<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                onTouchOut<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First there were just few constructor parameters, but soon their number grow. It was time to refactor. Usual way to solve constructor over-injection is to refactor set of parameters into a new abstraction. It comes to mind pretty fast that <code>position</code>, <code>inset</code> and <code>fromView</code> all describe popover position. I already had a <code>Position</code> enum defined like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Position</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> bottom\n    <span class=\"token keyword\">case</span> top\n    <span class=\"token keyword\">case</span> center\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>so I decided to add the rest of the properties to its associated values:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Position</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">center</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What I liked about that solution is that I could solve the issue that <code>inset</code> actually does not matter for <code>center</code> position, and with enum and associated values I can avoid meaningless parameters.</p>\n<p>What I didn't like though was the fact that I loose the ability to use default values. So after this refactoring the code became cluttered with those defaults pretty fast:</p>\n<p>showPopoverMessage(message, position: .bottom(fromView: nil, inset: 8))</p>\n<p>So I started to wonder if there is a way to workaround Swift limitation of not being able to specify defaults for associated values. In the end I found few ways to do that.</p>\n<h4>Enum with static factory methods</h4>\n<p>The first solution that comes to mind is to define static factory methods with default parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">center</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PopoverPosition</span><span class=\"token punctuation\">.</span><span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> fromView<span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> inset<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>Unfortunately this will not compile - compiler treats static method as redeclaration of enum case (even if different argument labels are used). There are two options here: either to change methods names, i.e. using an external name of first parameter as a method name prefix:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">bottomFrom</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PopoverPosition</span><span class=\"token punctuation\">.</span><span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> fromView<span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> inset<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>or to rename enum cases, i.e. capitalising them:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PopoverPosition</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> fromView<span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> inset<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>The main downside of this approach is the need to use different names for methods and cases.</p>\n<h4>Using struct instead of enum</h4>\n<p>Another pretty obvious option is to switch from enum to struct.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Position</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> bottom\n        <span class=\"token keyword\">case</span> top\n        <span class=\"token keyword\">case</span> center\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> position<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Position</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">,</span> fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> position\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>fromView <span class=\"token operator\">=</span> fromView\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inset <span class=\"token operator\">=</span> inset\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">PopoverPosition</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PopoverPosition</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">,</span> fromView<span class=\"token punctuation\">:</span> fromView<span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> inset<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a bit more to type but it solves the issue. With private initialiser we can limit ways to construct the value to only factory methods which makes it closer to enum cases with associated values. The downside is that now we have two types instead of one (struct and enum) and we can not use <code>PopoverPosition</code> value in a <code>switch</code>, we have to use its <code>position</code> property.</p>\n<h4>Using enum with a builder</h4>\n<p>Trying to stick with enum I came up with another option - using an inner builder type to scope factory methods and avoid compiler complaining about redeclarations:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Position</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">center</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Position</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">.</span><span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span>fromView<span class=\"token punctuation\">:</span> fromView<span class=\"token punctuation\">,</span> inset<span class=\"token punctuation\">:</span> inset<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> make<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this now I have a way to construct enum value with default associated values like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Instead of using <code>Builder</code> directly, which looks a bit clumsy we can use a <code>make</code> method defined in enum:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Position</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> make<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token class-name\">Position</span><span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">.</span><span class=\"token function\">bottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>After all I ended up using a struct instead of enum. Again I end up with preferring something else to enum, which I consider a code smell in general. There is definitely a place for enums in Swift code, and I do use them from time to time, but most of the time they are not the best option.</p>\n<h4>Update</h4>\n<p>Thanks to <a href=\"https://twitter.com/aligatr\">Olivier</a> for pointing me to the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0155-normalize-enum-case-representation.md\">proposal</a> that is supposed to fix the issue that caused this post in the first place by normalising associated values representations, which will result in allowing defaults for associated values.</p>","fields":{"slug":"/swift-enums-with-associated-values-defaults/"},"frontmatter":{"id":"5b6f5a3a9d28c70f0f015f83","title":"Swift enums with associated values defaults","date":"March 24, 2017","description":"In Swift enums are much more powerful than we got used to in other languages. One of the features that makes them more interesting to use is associated values - values that each instance of enum case can carry along with it. We can not have stored properties in the enum, so associated values is basically the only way to store additional data with enum value. Creating an enum value with associated value has a similar semantics as a method call. The difference is - we can not define defaults for parameters which represent associated values.","tags":""}},"previous":{"excerpt":"With Xcode 8 Apple finally provided developers with first party API to develop plugin-like Xcode extensions, at the same time closing all the doors for inâ€¦","fields":{"slug":"/xcode-source-editor-extension-superpowered-with-sourcekitten/"},"frontmatter":{"title":"Xcode Source Editor Extension superpowered with SourceKitten","date":"February 19, 2017"}},"next":{"excerpt":"Very often in my practice deep links were something that no one cares much, they work somehow and its fine. Or there are just few of them and its really notâ€¦","fields":{"slug":"/deeplinks-no-brainer/"},"frontmatter":{"title":"Deep links with no brainer","date":"September 06, 2017"}}},"pageContext":{"id":"8240773d-746b-594a-97b1-1fdeddbdffdb","previousPostId":"2e9bac78-3f51-5094-a2a5-339d7444ea1e","nextPostId":"5622e826-03a2-52ff-9ece-efd84781794f"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}