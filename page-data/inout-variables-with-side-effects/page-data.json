{"componentChunkName":"component---src-templates-blog-post-js","path":"/inout-variables-with-side-effects/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"89f247bd-b520-5556-a3ca-b965aafc31d7","excerpt":"Every app has some kind of caching. Let's say our caching strategy is very simple: check if data is in the memory cache and return it if not - make a networkâ€¦","html":"<p>Every app has some kind of caching. Let's say our caching strategy is very simple:</p>\n<ul>\n<li>check if data is in the memory cache and return it</li>\n<li>if not - make a network call and cache the result when it's done</li>\n</ul>\n<p>For that you can write code that will probably look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> cached <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>menuPreferences <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span><span class=\"token function\">dispatch_get_main_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">:</span> cached<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    repository<span class=\"token punctuation\">.</span><span class=\"token function\">getMenuPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> preferences <span class=\"token operator\">=</span> preferences <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">setMenuPreferences</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">:</span> preferences<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pretty simple and straight forward. But what if you need to add caching for another piece of data? And another, and another and so on and on. Having to repeat this check-cache-or-make-request dance is just boring. So let's improve it and extract common logic to a method.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">serveCached</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">inout</span> cached<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token attribute atrule\">@noescape</span> updateCache<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ErrorType</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ErrorType</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> cached <span class=\"token operator\">=</span> cached <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span><span class=\"token function\">dispatch_get_main_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>cached<span class=\"token punctuation\">,</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">updateCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> response<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> response <span class=\"token punctuation\">{</span>\n                cached <span class=\"token operator\">=</span> response\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> preferences<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MenuPreferences</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>menuPreferences <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">setMenuPreferences</span><span class=\"token punctuation\">(</span>newValue <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">serveCached</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>preferences<span class=\"token punctuation\">,</span> updateCache<span class=\"token punctuation\">:</span> repository<span class=\"token punctuation\">.</span>getMenuPreferences<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> completion<span class=\"token punctuation\">)</span></code></pre></div>\n<p>What we are doing here is that we are trying to use <code>inout</code> variable to wrap access to the storage. We do that by defining custom accessors for it. Yes, right on the local variable! (<code>willSet</code> and <code>didSet</code> will work exactly the same way). This way we will have a side effect on assignment. Then we pass it to the method, read from it and later assign new value to it.</p>\n<p>Looks cool! Except that it will not work. To be more precise it will work only if <code>inout</code> variable is not captured by the code block that escapes. So if what you do in <code>updateCache</code> is synchronous then it will work. But most likely it will be asynchronous and in this case the closure passed to <code>updateCache</code> will need to escape. Here is the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md\">proposal</a> for Swift 3 that explains what happens here and says:</p>\n<blockquote>\n<p>... an <code>inout</code> parameter is captured as a <strong>shadow copy</strong> that is written back to the argument when the callee returns. This allows <code>inout</code> parameters to be captured and mutated with the expected semantics when the closure is called while the inout parameter is active... But this leads to unintuitive results when the closure escapes, since the <em>shadow copy</em> is persisted independently of the original argument.</p>\n</blockquote>\n<p>But no worries! There is nothing here that can not be fixed with a simple boxing. Instead of passing <code>inout</code> variable to the method we will pass it a variable that boxes accessors instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Variable</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">get</span> value<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">set</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this simple class we need to make some trivial changes in <code>serveCached</code> method and the calling part stays almost the same:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> preferences <span class=\"token operator\">=</span> <span class=\"token class-name\">Variable</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>menuPreferences <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">setMenuPreferences</span><span class=\"token punctuation\">(</span>newValue <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">serveCached</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">,</span> updateCache<span class=\"token punctuation\">:</span> repository<span class=\"token punctuation\">.</span>getMenuPreferences<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> completion<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>In Swift it's very common that such simple box classes become very helpful. In my current project besides this one and a trivial <code>Box</code> class we also use such boxes as <code>NSCodingBox</code> and <code>Cached</code> which save us from writing a lot of boilerplate. And the fact that in Swift we can use setters and observers for local variables just the same way as for properties also allows for some neat code improvements.</p>","fields":{"slug":"/inout-variables-with-side-effects/"},"frontmatter":{"id":"5b6f5a3a9d28c70f0f015f7e","title":"Inout variables with side effects","date":"December 15, 2016","description":"Every app has some kind of caching. Let's say our caching strategy is very simple: check if data is in the memory cache and return it, if not - make a network call and cache the result when it's done. For that you can write code that will probably look something like this... ","tags":""}},"previous":{"excerpt":"It's already 2 years of Swift and its interoperability with Objective-C as well. When app extensions were released we've got a way to share our code acrossâ€¦","fields":{"slug":"/objective-c-headers-in-swift-framework-custom-build-configurations/"},"frontmatter":{"title":"Objective-C headers in Swift framework & custom build configurations","date":"October 29, 2016"}},"next":{"excerpt":"Textual content is the essential part of any app and text handling in iOS has been improving through last years. Starting with iOS 7 we have dynamic types andâ€¦","fields":{"slug":"/adaptive-text-styles/"},"frontmatter":{"title":"Adaptive text styles","date":"January 19, 2017"}}},"pageContext":{"id":"89f247bd-b520-5556-a3ca-b965aafc31d7","previousPostId":"faf9eed4-e0f2-58cf-a074-2f6a765f769d","nextPostId":"72925bdf-f8df-5c0f-92b6-73a361da8f10"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}