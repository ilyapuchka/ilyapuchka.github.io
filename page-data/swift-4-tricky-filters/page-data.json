{"componentChunkName":"component---src-templates-blog-post-js","path":"/swift-4-tricky-filters/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"be3abaac-6946-526e-b286-ac3176707924","excerpt":"This is a short story of a regression in Swift 4 that I've recently had to deal with. It can seem as a simple problem, but I think it's a good example ofâ€¦","html":"<p>This is a short story of a regression in Swift 4 that I've recently had to deal with. It can seem as a simple problem, but I think it's a good example of unexpected regression caused by a positive change in a language standard library.</p>\n<p>First - a bit of a context. In my current project we extensively use <a href=\"http://github.com/xmartlabs/Eureka\">Eureka</a> framework to build forms. Most of the time values in our forms are selected from a list of options. For this purpose Eureka has a special type of section - <code>SelectableSectionType</code>. There is also a base class <code>Section</code> that represents a collection of rows. To make working with rows and sections easier this type implements protocols that allow us to work with it as with a collection of rows, like if it was a plain array. One of these protocols is <code>RangeReplaceableCollection</code> which simplifies inserting and removing rows from the section. I would not describe here all the machinery behind it but I will show some parts of this implementation to showcase the issue.</p>\n<p>Any <code>Section</code> that implements <code>SelectableSectionType</code> handles rows selection that can be setup with multiple or single selection option. In case of a single selection implementation goes through all the rows of this section and clears the value of the row that was selected previously, which removes selection indicator from its cell, and sets the value of the row for the new selection (selected row is determined by non-nil value). For that it is using combination of <code>filter</code> and <code>forEach</code> methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">SelectableSectionType</span> <span class=\"token keyword\">where</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Section</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">prepare</span><span class=\"token punctuation\">(</span>selectableRows rows<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">BaseRow</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> rows <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n            row<span class=\"token punctuation\">.</span>onCellSelection <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> cell<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>row<span class=\"token punctuation\">.</span>isDisabled <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">switch</span> s<span class=\"token punctuation\">.</span>selectionType <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>multipleSelection<span class=\"token punctuation\">:</span> <span class=\"token operator\">...</span>\n                <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">singleSelection</span><span class=\"token punctuation\">(</span>enableDeselection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\">// clear baseValue for all rows except selected</span>\n                    s<span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">{</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>baseValue <span class=\"token operator\">!=</span> <span class=\"token nil constant\">nil</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token short-argument\">$0</span> <span class=\"token operator\">!=</span> row <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span>\n                        <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>baseValue <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span>\n                        <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateCell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// update value of selected row</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code works fine with Swift 3, but with Swift 4 selection started to behave \"weird\": as soon as you select new option it was not possible to select previous option any more.</p>\n<p>Debugging this issue lead to discovery that after option was deselected and then selected again <code>row.onCellSelection</code> closure was still called, as expected, but <code>guard</code> expression was not passing any more, specifically because <code>self</code> was <code>nil</code>. As in this context <code>self</code> is a reference to <code>Section</code> it would mean that the section was at some point deallocated. <code>row.section</code> which should contain a reference to the section where row was added to, was also <code>nil</code> at this point. But as other rows were behaving correctly it could only mean that they were referencing different sections, and one of them was at some point deallocated.</p>\n<p>And indeed adding <code>deinit</code> method to <code>Section</code> and adding a breakpoint there clearly demonstrated that some instance of section was being deallocated. What was still surprising is that <code>deinit</code> was called even before <code>row.onCellSelection</code> closure completed. Instead it was called right after <code>forEach</code> returned.</p>\n<p><a href=\"https://twitter.com/ilyapuchka/status/910155957480624128\">My first guess</a> was to blame some bug related to ARC, but it turned out to be related to <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0174-filter-range-replaceable.md\">SE-0174</a>. According to this proposal a new version of <code>filter</code> method was added to <code>RangeReplaceableCollection</code> which is returning <code>Self</code> instead of <code>[Self.Element]</code> as defined in Swift 3. This method has a default implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">RangeReplaceableCollection</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">filter</span><span class=\"token punctuation\">(</span>\n        <span class=\"token omit keyword\">_</span> isIncluded<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">rethrows</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">lazy</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isIncluded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">RangeReplaceableCollection</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">S</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sequence</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> elements<span class=\"token punctuation\">:</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Element</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> elements<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>RangeReplaceableCollection</code> already requires <code>init</code> initialiser on implementing type which made this implementation possible.</p>\n<p>And indeed <code>init</code> and <code>append</code> methods of <code>Section</code> were called in this case. As you can see it was resulting in updating <code>row.section</code> property. At the same time using KVO it was calling <code>prepare(selectableRows:)</code> when row was added to the section, which resulted in overriding <code>onCellSelection</code> for this row.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Section</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">RangeReplaceableCollection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">append</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sequence</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>contentsOf newElements<span class=\"token punctuation\">:</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Element</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">BaseRow</span> <span class=\"token punctuation\">{</span>\n        kvoWrapper<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">.</span><span class=\"token function\">addObjects</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> newElements<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token short-argument\">$0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// triggers KVO invocation</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> newElements <span class=\"token punctuation\">{</span>\n            row<span class=\"token punctuation\">.</span><span class=\"token function\">wasAddedTo</span><span class=\"token punctuation\">(</span>section<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">BaseRow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">wasAddedTo</span><span class=\"token punctuation\">(</span>section<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Section</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>section <span class=\"token operator\">=</span> section\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And as the section reference in row is <code>weak</code> and a new section was just created by <code>filter</code> method, this instance was deallocated as soon as code was escaping the only context that has a strong reference to it, which is a subsequent <code>forEach</code> call.</p>\n<p>The fix for this issue is much simpler then debugging it. One of the option is to stop using <code>filter</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">s<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>baseValue <span class=\"token operator\">!=</span> <span class=\"token nil constant\">nil</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token short-argument\">$0</span> <span class=\"token operator\">!=</span> row <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>baseValue <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span>\n    <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateCell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another option is to explicitly specify return type of <code>filter</code> method so that Swift 3 variant is used:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">s<span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">{</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>baseValue <span class=\"token operator\">!=</span> <span class=\"token nil constant\">nil</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token short-argument\">$0</span> <span class=\"token operator\">!=</span> row <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">BaseRow</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Both of these options will result in array of rows being created instead of new <code>Section</code> which will not lead to all of its side effects, in this case unneeded. Luckily none of the rest of Eureka's code was affected as in other places where <code>filter</code> was used its return type was already explicitly set to array.</p>\n<p>This was a tricky issue and a fun hunt! I hope this write-up will help me and you to avoid such bugs in future. And as always thanks to <a href=\"https://twitter.com/jckarter\">Joe Groff</a> for being so helpful and responsive on Twitter.</p>","fields":{"slug":"/swift-4-tricky-filters/"},"frontmatter":{"id":"5b6f5a3a9d28c70f0f015f85","title":"Swift 4 tricky filters","date":"September 26, 2017","description":"This is a short story of a regression in Swift 4 that I've recently had to deal with. It can seem as a simple problem, but I think it's a good example of unexpected regression caused by a positive change in a language standard library.","tags":""}},"previous":{"excerpt":"Very often in my practice deep links were something that no one cares much, they work somehow and its fine. Or there are just few of them and its really notâ€¦","fields":{"slug":"/deeplinks-no-brainer/"},"frontmatter":{"title":"Deep links with no brainer","date":"September 06, 2017"}},"next":{"excerpt":"When I published one of my previous posts about deeplinks and then decided to turn it into a framework it turned out that Brandon Williams was working on aâ€¦","fields":{"slug":"/url-parser-in-swift-functional-style-part-1/"},"frontmatter":{"title":"URL parser in functional style. Part 1.","date":"November 07, 2017"}}},"pageContext":{"id":"be3abaac-6946-526e-b286-ac3176707924","previousPostId":"5622e826-03a2-52ff-9ece-efd84781794f","nextPostId":"d03061a7-a4cd-5362-b15e-7f66ad3e1698"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}