{"componentChunkName":"component---src-templates-blog-post-js","path":"/ioc-container-in-swift-circular-dependencies-and-auto-injection/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"1b455eeb-dc57-5280-a846-92862e996e23","excerpt":"Note (15.04.16): This post is updated to reflect some of the latest changes in Dip. In my previous post I wrote about Dip, lightweight IoC written in Swiftâ€¦","html":"<blockquote>\n<p>Note (15.04.16): This post is updated to reflect some of the latest changes in Dip.</p>\n</blockquote>\n<p>In my <a href=\"http://ilya.puchka.me/ioc-container-in-swift/\">previous post</a> I wrote about <a href=\"https://github.com/AliSoftware/Dip\">Dip</a>, lightweight IoC written in Swift. Here I would like to describe how some other of it's features were implemented. They are not yet available in original repo, but you can check them out in my <a href=\"https://github.com/ilyapuchka/Dip/tree/feature/auto-injection\">fork</a>.</p>\n<h3>Circular dependencies</h3>\n<p>Let's say we have a server-client model where client has reference to server and server has backward weak reference to it's client. First problem is that we can not have two objects that have reference to each other to be created with constructors like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientImp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> server<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Server</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Server</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> server <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerImp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> client<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Client</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>client <span class=\"token operator\">=</span> client <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ncontainer<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ServerImp</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">:</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">}</span>\ncontainer<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ClientImp</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">:</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we try this we will end up in infinite recursion - we will not be able to finish creating instance of server or client and will enter another <code>resolve</code> which will enter another <code>resolve</code> and so forth.</p>\n<p>Another problem is that we need to reuse already resolved instances somehow, otherwise we will have infinite recursion again trying to create new instances every time. For that we can simply store resolved instances in a dictionary by the same keys used to get factories to create them. We can abstract that to private class that will also detect when this pool of instances should be drained.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResolvedInstances</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> resolvedInstances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">DefinitionKey</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">Any</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> depth<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">resolve</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token attribute atrule\">@noescape</span> block<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n        depth <span class=\"token operator\">=</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        \n        <span class=\"token keyword\">defer</span> <span class=\"token punctuation\">{</span>\n            depth <span class=\"token operator\">=</span> depth <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> depth <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                resolvedInstances<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> resolved <span class=\"token operator\">=</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resolved\n    <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see when depth of recursion will reach zero (when code returns from outermost <code>resolve</code> call) cache will be cleared. Until then we can get instances from cache and reuse them.</p>\n<p>To handle recursion we need to separate creation of object and resolving its dependency for at least one of circular dependencies. Either of <code>Client</code> and <code>Server</code> can still use constructor injection, but another (or both) should use property injection. Here where <code>DefinitionOf</code> class comes back on stage.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">resolveDependencies</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DependencyContainer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">DefinitionOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> resolveDependenciesBlock <span class=\"token operator\">==</span> <span class=\"token nil constant\">nil</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"You can not change resolveDependencies block after it was set.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>resolveDependenciesBlock <span class=\"token operator\">=</span> block\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> scope<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ComponentScope</span>\n<span class=\"token keyword\">var</span> factory<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span></code></pre></div>\n<p>Here we add few properties to this class - <code>resolveDependenciesBlock</code> and <code>scope</code>. First is a block that will be called by container after factory of this definition is called and just before <code>resolve</code> returns. Scope will define how exactly instances resolved by that definition will be reused - not reused at all, stored as singleton or reused during one call to <code>resolve</code>. The last one is the one that should be used to register circular dependencies. As I mentioned before not reusing instances will cause infinite recursion again. <code>resolvedInstance</code> property will be used only to store singleton instances.</p>\n<p>With all that we can finally resolve circular dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">resolve</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>tag tag<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Tag</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">DefinitionKey</span><span class=\"token punctuation\">(</span>protocolType<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> factoryType<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> associatedTag<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> definition <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>definitions<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">DefinitionOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"No definition registered with </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">key</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> usingKey<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DefinitionKey</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> definition<span class=\"token punctuation\">.</span>scope <span class=\"token operator\">==</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">ObjectGraph</span> <span class=\"token operator\">?</span> key <span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_resolve</span><span class=\"token punctuation\">(</span>usingKey<span class=\"token punctuation\">,</span> definition<span class=\"token punctuation\">:</span> definition<span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">:</span> builder<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">_resolve</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DefinitionKey</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> definition<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DefinitionOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> resolvedInstances<span class=\"token punctuation\">.</span>resolve <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> previouslyResolved<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> resolvedInstances<span class=\"token punctuation\">.</span><span class=\"token function\">previouslyResolved</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> previouslyResolved\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> resolvedInstance <span class=\"token operator\">=</span> <span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">)</span>\n    \n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> previouslyResolved<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> resolvedInstances<span class=\"token punctuation\">.</span><span class=\"token function\">previouslyResolved</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> previouslyResolved\n            <span class=\"token punctuation\">}</span>\n    \n            resolvedInstances<span class=\"token punctuation\">.</span><span class=\"token function\">storeResolvedInstance</span><span class=\"token punctuation\">(</span>resolvedInstance<span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span>\n            definition<span class=\"token punctuation\">.</span>resolveDependenciesBlock<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> resolvedInstance<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> resolvedInstance\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">ResolvedInstances</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">storeResolvedInstance</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> forKey key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DefinitionKey</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>resolvedInstances<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> instance\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">previouslyResolved</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DefinitionKey</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>resolvedInstances<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">T</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we first check if we need to reuse instances at all. If we need then we use the same definition key to check if there is anything cached. If it's there we return it, otherwise we call builder. After builder is called we first should cache result and then call <code>resolveDependenciesBlock</code> block of definition if there is any. Interesting trick here is that after builder returns we check for instance to reuse again. That's because builder will call factory, that may call another <code>resolve</code> that may produce the same instance that we were trying to resolve originally. So when we return from builder and there is already cached instance we just return it instead of instance that was created by call to builder. Otherwise our circular dependency will be broken - we will have to clients and server, referenced by client will reference to another instance of <code>Client</code>.</p>\n<h3>Auto injection</h3>\n<p>We can have situation when we already have an instance of some type (for example created by Storyboard) and we want to fill it's dependencies. Currently we can do it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceImp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> logger<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Logger</span>\n    <span class=\"token keyword\">var</span> collaboratingService<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AnotherService</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> service <span class=\"token operator\">=</span> <span class=\"token class-name\">ServiceImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nservice<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Logger</span>\nservice<span class=\"token punctuation\">.</span>collaboratingService <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">AnotherService</span></code></pre></div>\n<p>Or if we get <code>Service</code> instance also from the container can we have all of it's dependencies resolved without adding <code>resolveDependencies</code>, so that instead of this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">container<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">AnotherServiceImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">AnotherService</span> <span class=\"token punctuation\">}</span>\ncontainer<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ServiceImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>resolveDependencies <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> service <span class=\"token keyword\">in</span>\n    service<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Logger</span>\n    service<span class=\"token punctuation\">.</span>collaboratingService <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">AnotherService</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> service <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Service</span></code></pre></div>\n<p>we would do just this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">container<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">AnotherServiceImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">AnotherService</span> <span class=\"token punctuation\">}</span>\ncontainer<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ServiceImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> service <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Service</span></code></pre></div>\n<p>The last case has much more cleaner syntax. Can we do that?</p>\n<p>The idea is simple - using reflection we can get <code>Mirror</code> of the object that will contain all its properties and their values. To be able to change those values we will wrap them in simple class wrappers. This way value will be not copied in the mirror, but will reference the same object. If we will change its wrapped value we will change it not only for mirror, but in real instance too.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Injected</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _value <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">T</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here I define some private protocol just to be able to detect that property is wrapped. And provide very simple generic wrapper that conforms to this protocol. Now I can use it to define property for my dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientImp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> server<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Injected</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\ncontainer<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ClientImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">}</span>\ncontainer<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ServerImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Client</span></code></pre></div>\n<p>Here I faced the first problem - I need some initial value for <code>server</code> property or I need a constructor, or this property should be defined os optional. Using constructor will mean calling <code>resolve</code> on container manually. Optional will not work either cause <code>nil</code> value can not be checked for type with <code>is</code> operator, it will always return <code>false</code>. So I will not be able to detect that property is wrapped.</p>\n<p>The solution is to use instance of <code>Injected&#x3C;T></code> that wraps <code>nil</code> value as initial value of property:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Injected</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> _Injected <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientImp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> <span class=\"token class-name\">Injected</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So good so far. In <code>resolve</code> method before it returns I can call another method that will perform reflection and resolve dependencies of the instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DependencyContainer</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">_resolve</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DefinitionKey</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> definition<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DefinitionOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token operator\">-></span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        definition<span class=\"token punctuation\">.</span>resolveDependenciesBlock<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>resolvedInstance<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">autoInjectProperties</span><span class=\"token punctuation\">(</span>resolvedInstance<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resolvedInstance\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">autoInjectProperties</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> <span class=\"token class-name\">Mirror</span><span class=\"token punctuation\">(</span>reflecting<span class=\"token punctuation\">:</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here I faced few other problems. First was that I have definition that can resolve only unwrapped type and I can not construct wrapped type in runtime. And another one - how to deal with weak values for circular dependencies. If we use <code>Injected</code> wrapper for circular dependencies we will have retina cycle, cause it holds strong reference to wrapped value.</p>\n<p>I could try to work around first problem registering another definition for wrapped type like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">container<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ServerImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">}</span>\ncontainer<span class=\"token punctuation\">.</span>register <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Injected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Injected</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>But that's just code duplication. And I don't want clients to care about wrapper, I want it to be used only to define properties.</p>\n<p>Instead we can ask wrapper to resolve its value. Inside wrapper we know wrapped type at compile time, so we will be able to call <code>container.resolve()</code>. We just need to pass in a container.</p>\n<p>To do that we can introduce protocol:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">AutoInjectedPropertyBox</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">resolve</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DependencyContainer</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Injected</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AutoInjectedPropertyBox</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">resolve</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DependencyContainer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> resolved <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">T</span>\n        value <span class=\"token operator\">=</span> resolved\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now it's trivial to resolve it:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">autoInjectProperties</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> child <span class=\"token keyword\">in</span> <span class=\"token class-name\">Mirror</span><span class=\"token punctuation\">(</span>reflecting<span class=\"token punctuation\">:</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> injectedPropertyBox <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">AutoInjectedPropertyBox</span> <span class=\"token punctuation\">{</span>\n            injectedPropertyBox<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For weak properties I use the same approach. I introduce another wrapper <code>InjectedWeak</code> that reference wrapped value with <code>weak</code> property:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InjectedWeak</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AnyObject</span><span class=\"token operator\">?</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _value <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">T</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">InjectedWeak</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AutoInjectedPropertyBox</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">resolve</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DependencyContainer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> resolved <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">T</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>resolved <span class=\"token keyword\">is</span> <span class=\"token class-name\">AnyObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">T</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> can not be casted to AnyObject. InjectedWeak wrapper should be used to wrap only classes.\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        value <span class=\"token operator\">=</span> resolved\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And that's it! Now the only thing that you need is to use types wrapped in <code>Injected</code> for you properties and Dip will resolve them for you! You can even make them private and for clients of you classes provided computed property that will unwrap private property. Yes, that sounds like an overhead, but I think it's appropriate for such feature.</p>\n<p>I really hope that these two features will make Dip even more useful than it is now.</p>","fields":{"slug":"/ioc-container-in-swift-circular-dependencies-and-auto-injection/"},"frontmatter":{"id":"5b6f5a3a9d28c70f0f015f6c","title":"IoC container in Swift. Circular dependencies and auto-injection","date":"November 11, 2015","description":"In my previous post I wrote about Dip, lightweight IoC written in Swift. Here I would like to describe how some other of it's features were implemented. They are not yet available in original repo, but you can check them out in my fork. ","tags":""}},"previous":{"excerpt":"Note (15.04.16): This post is updated to reflect some of the latest changes in Dip. In my previous post I talked about dependency injection framework forâ€¦","fields":{"slug":"/ioc-container-in-swift/"},"frontmatter":{"title":"IoC container in Swift","date":"November 08, 2015"}},"next":{"excerpt":"Note (15.04.16): This post is updated to reflect some of the latest changes in Dip. In some of my previous posts I wrote about using dependency injection withâ€¦","fields":{"slug":"/dependency-injecinjection-with-dip/"},"frontmatter":{"title":"Dependency injection with Dip","date":"December 24, 2015"}}},"pageContext":{"id":"1b455eeb-dc57-5280-a846-92862e996e23","previousPostId":"0c3802aa-a58a-59fa-aea8-be9c2456921c","nextPostId":"047e148b-f00c-58c4-9a75-9595aca71a5d"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}