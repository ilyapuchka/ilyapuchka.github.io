{"componentChunkName":"component---src-templates-blog-post-js","path":"/creating-simple-os-x-app/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"ea9adc21-c3f5-5eca-a0ba-9023e234a979","excerpt":"OS X developers are kind of rare developer species. I don't know about you but among my fellow developers there is only one who is doing OS X. I'm not sure ifâ€¦","html":"<p>OS X developers are kind of rare developer species. I don't know about you but among my fellow developers there is only one who is doing OS X. I'm not sure if Swift's popularity will (or already does) change something, most likely we will have more Swift backend developers instead.</p>\n<!-- description -->\n<p>Anyhow. Recently I came up with an idea of a simple app that can help me and my colleagues in our daily work. At HelloFresh when it comes to dates everything becomes very special. We don't use gregorian calendar week - instead our week starts on Saturday and ends on Friday. Though we still use ISO8601 standard. First I was surprised to know that in this standard the year of the week is defined by the year of that's week Thursday. My next surprise was that it is perfectly handled by <code>NSCalendar</code>.</p>\n<p>So the idea for the app was obvious - to have a visual calendar that will provide correct week information. So that we always know what week is it now. A simple status bar app with popper calendar feels like a perfect solution. So here is what I learned building it (I didn't read any Apple's documentation, 'cause wanted to make it in one evening and used only stackoverflow).</p>\n<p>First I found an open source calendar implementation (I could not use <code>NSDatePicker</code> 'cause was going to tweak it a bit) - MLCalendarView. There were not so many options to choose from, comparing with iOS - only two...</p>\n<p>The rest I had to do was to create a status bar item. First I went to <code>MainMenu.xib</code> created by standard Cocoa App template and deleted menu and window from there - I will not need them anyway.</p>\n<p>Then I created my status item:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> statusItem<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSStatusItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> statusItem <span class=\"token operator\">=</span> <span class=\"token class-name\">NSStatusBar</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemStatusBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">statusItemWithLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NSVariableStatusItemLength</span><span class=\"token punctuation\">)</span>\n    statusItem<span class=\"token punctuation\">.</span>button<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n    statusItem<span class=\"token punctuation\">.</span>button<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token other-directive property\">#selector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppDelegate</span><span class=\"token punctuation\">.</span><span class=\"token function\">showContextMenu</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> options<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSEventMask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LeftMouseUpMask</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">RightMouseUpMask</span><span class=\"token punctuation\">]</span>\n    statusItem<span class=\"token punctuation\">.</span>button<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendActionOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> statusItem\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>At a glance - nothing special here. But note how target-action pattern is implemented. Instead of associating some selector with single type of event, like in iOS, we need to provide a bit-mask (options set) for events and the same selector will be called for any event from this set. Left-clicks will work even if you set up only target and action. But if you want to handle other types of interactions you need to provide some events mask.</p>\n<p>On right-click I want to show a single-item menu with only one option to close the app. Here is a menu for that:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> statusMenu<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSMenu</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> rightClickMenu <span class=\"token operator\">=</span> <span class=\"token class-name\">NSMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rightClickMenu<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NSMenuItem</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Close\"</span></span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token other-directive property\">#selector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppDelegate</span><span class=\"token punctuation\">.</span>closeApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> keyEquivalent<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> rightClickMenu\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>On left-click I want to show a popover from the status bar item. Here is how you create a popover in OS X:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> popover<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSPopover</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> popover <span class=\"token operator\">=</span> <span class=\"token class-name\">NSPopover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    popover<span class=\"token punctuation\">.</span>contentViewController <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>calendar\n    popover<span class=\"token punctuation\">.</span>appearance <span class=\"token operator\">=</span> <span class=\"token class-name\">NSAppearance</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSAppearanceNameAqua</span><span class=\"token punctuation\">)</span>\n    popover<span class=\"token punctuation\">.</span>animates <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    popover<span class=\"token punctuation\">.</span>behavior <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Transient</span>\n    <span class=\"token keyword\">return</span> popover\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nothing special except weird <code>NSAppearanceNameAqua</code>. Without that colors in popover are \"a bit\" different.</p>\n<p>Then to actually show popover or context menu on right/left-click here is a handler method:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">showContextMenu</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSStatusBarButton</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token class-name\">NSApp</span><span class=\"token punctuation\">.</span>currentEvent<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>type <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">RightMouseUp</span><span class=\"token punctuation\">:</span>\n            statusItem<span class=\"token punctuation\">.</span><span class=\"token function\">popUpStatusItemMenu</span><span class=\"token punctuation\">(</span>statusMenu<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        popover<span class=\"token punctuation\">.</span><span class=\"token function\">showRelativeToRect</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">,</span> ofView<span class=\"token punctuation\">:</span> sender<span class=\"token punctuation\">,</span> preferredEdge<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSRectEdge</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">MaxY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another difference in UI events handling on OS X. Action handlers can not receive event as a second parameter. Instead we ask <code>NSApp</code> for current event (last received event). Then I simply switch over type of event and either show a menu or a popover.</p>\n<p>And that is it! The rest was setting up and tweaking calendar. Here is the result - <a href=\"https://github.com/ilyapuchka/HFWeekApp\">https://github.com/ilyapuchka/HFWeekApp</a></p>\n<p>I don't know if there is any plan for Cocoa in Apple. But without it we can end up in the world where each desktop app is an Electron app...</p>","fields":{"slug":"/creating-simple-os-x-app/"},"frontmatter":{"id":"5b6f5a3a9d28c70f0f015f70","title":"Creating a simple OS X app","date":"March 24, 2016","description":"","tags":"OSX"}},"previous":{"excerpt":"TL;DR - You can play with source code and example project here. Storyboards segues are very cool. They are very easy yet powerful. They help to incapsulateâ€¦","fields":{"slug":"/intermediate-action-segues/"},"frontmatter":{"title":"Intermediate action segues","date":"December 27, 2015"}},"next":{"excerpt":"I definitely agree with those who say that you should not depend on code from external source (meaning where and how it is hosted). You should check in any codeâ€¦","fields":{"slug":"/on-package-managers/"},"frontmatter":{"title":"On package managers","date":"March 29, 2016"}}},"pageContext":{"id":"ea9adc21-c3f5-5eca-a0ba-9023e234a979","previousPostId":"fee58a6f-fcfc-5712-adc6-5f7de0b5a601","nextPostId":"5f1bcd95-a64f-5dca-956f-b99a1d092769"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}