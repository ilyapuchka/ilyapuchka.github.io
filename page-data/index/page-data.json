{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka"}},"allMarkdownRemark":{"nodes":[{"excerpt":"When you have a large code base more often than not you end up with your code broken down into multiple frameworks. But when it comes to…","fields":{"slug":"/libraries-with-resources-optimized-for-build-time-and-application-size/"},"frontmatter":{"date":"June 27, 2023","title":"Libraries with resources optimized for build time and application size","description":"When you have a large code base more often than not you end up with your code broken down into multiple frameworks. But when it comes to resources often they are kept together in the main app bundle. While this works for the single app target it may present some challenges when testing your code, especially using snapshot tests, or affect the application size when you have additional targets like app extensions."}},{"excerpt":"Property wrappers is one of the recent Swift proposals that have been welcomed probably the most by the community. To be fair though they…","fields":{"slug":"/decoding-nested-values-with-property-wrappers/"},"frontmatter":{"date":"February 13, 2020","title":"Decoding nested values with property wrappers","description":"Property wrappers is one of the recent Swift proposals that have been welcomed probably the most by the community. Let's see how property wrappers can be used to solve one decoding edge case as an example - decoding deeply nested values."}},{"excerpt":"Recently we were discussing in our team how to approach having fixes for bugs discovered during release both in release and the trunk branch…","fields":{"slug":"/git-rebase-vs-git-rebase-onto/"},"frontmatter":{"date":"November 10, 2019","title":"git rebase vs. git rebase --onto","description":"A quick note on git rebase vs. git rebase --onto"}},{"excerpt":"Nowadays Slack, some kind of CI and often Fastlane are default tools in a toolset of iOS developers. These tools serve their own purposes…","fields":{"slug":"/making-slack-ci-and-fastlane-work-together/"},"frontmatter":{"date":"June 08, 2019","title":"Making Slack, CircleCI and Fastlane work together","description":"Nowadays Slack, some kind of CI and often Fastlane are default tools in a toolset of iOS developers. These tools serve their own purposes well, but wouldn't they do it better when they all work together? In this tutorial, I'll describe how to connect Slack with CircleCI and Fastlane. I'll be using CircleCI as an example but it's pretty much the same with any modern CI solution. As a bonus, we will do that in Swift using Vapor 3.0. So this tutorial can be as well an introduction to Swift on the server with Vapor framework."}},{"excerpt":"Strings are everywhere. We all use strings everyday. In Swift String is a very powerful type. One of the features it had available since the…","fields":{"slug":"/swift5-string-interpolation/"},"frontmatter":{"date":"February 06, 2019","title":"Swift 5 string interpolation","description":"Strings are everywhere. We all use strings everyday. In Swift `String` is a very powerful type. One of the features it had available since the beginning is the string interpolation. With it we can embed any Swift expression inside the string literal instead of concatenating strings manually."}},{"excerpt":"Some time ago there was an explosion of articles and talks in the iOS community about \"unidirectional flow\" architectures, inspired by Redux…","fields":{"slug":"/implementing-features-with-reactivefeedback/"},"frontmatter":{"date":"November 07, 2018","title":"Implementing features with ReactiveFeedback","description":"Some time ago there was an explosion of articles and talks in the iOS community about \"unidirectional flow\" architectures, inspired by Redux library from JavaScript. The dust has settled since then but as a result of this storm, we now have ReSwift and other implementations of this approach. Reactive programming adepts didn't stay away for long and came up with RxFeedback. At Babylon, we use ReactiveCocoa so we've built ReactiveFeedback. In this article, you'll see how we use it to build the whole features in our app, not just increment counters so there will be a lot of code."}},{"excerpt":"This article is based on the talk I gave at iOS Astronauts meetup that was held on 03.10.2018 at Babylon. You can check out this talk and…","fields":{"slug":"/ios-ui-automation-tests-at-babylon/"},"frontmatter":{"date":"October 08, 2018","title":"iOS UI Automation Tests at Babylon","description":"Probably every iOS developer nowadays knows what UI tests are and how to write them. Sometimes we don't even have to write them ourselves because Xcode can do that for us. Of course, the result is far from ideal and probably you don't want to keep it as it is in your tests, but point is that it's not hard to write a code that will tap a button on a screen. What's hard is the issues you start to face when you write more and more of such tests. In this post, I'll be highlighting some of the issues we face with UI tests at Babylon."}},{"excerpt":"The title is a lie - there is no such thing as parameterized jobs (at the time of writing, but seems it’s going to be improved in 2.1) when…","fields":{"slug":"/parametrised-jobs-in-circleci/"},"frontmatter":{"date":"August 07, 2018","title":"Parameterized jobs in CircleCI","description":"The title is a lie - there is no such thing as parameterized jobs (at the time of writing, but seems it’s going to be improved in 2.1) when we are talking about CircleCI 2.0 workflows, which are (almost) awesome by the way. But with some tricks, we can achieve something close to that."}},{"excerpt":"One of the first tasks I got in my new team was to convert entire code base from in-house JSON encoding/decoding solution (in fact two of…","fields":{"slug":"/codable-in-practice/"},"frontmatter":{"date":"May 05, 2018","title":"Codable in practice","description":""}},{"excerpt":"In previous part we started to write base components of URL parser. Time to extend it and add some additional functionality, like…","fields":{"slug":"/url-parser-in-functional-style-part-2/"},"frontmatter":{"date":"November 07, 2017","title":"URL parser in functional style. Part 2.","description":"In previous part we started to write base components of URL parser. Time to extend it and add some additional functionality, like conditional, optional and wildcard patterns."}},{"excerpt":"When I published one of my previous posts about deeplinks and then decided to turn it into a framework it turned out that Brandon Williams…","fields":{"slug":"/url-parser-in-swift-functional-style-part-1/"},"frontmatter":{"date":"November 07, 2017","title":"URL parser in functional style. Part 1.","description":"When I published one of my previous posts about deeplinks and then decided to turn it into a framework it turned out that Brandon Williams was working on a similar thing for his Point-Free project, but related to parsing http requests for web framework. As parsing URLs is a subset of this problem I decided to go through his implementation and apply the same technique to rewrite parser that I have written in imperative way (and probably not in the best way) in a functional style. Just to see where it goes and as exercise in a functional programming. So here is the path I went through."}},{"excerpt":"This is a short story of a regression in Swift 4 that I've recently had to deal with. It can seem as a simple problem, but I think it's a…","fields":{"slug":"/swift-4-tricky-filters/"},"frontmatter":{"date":"September 26, 2017","title":"Swift 4 tricky filters","description":"This is a short story of a regression in Swift 4 that I've recently had to deal with. It can seem as a simple problem, but I think it's a good example of unexpected regression caused by a positive change in a language standard library."}},{"excerpt":"Very often in my practice deep links were something that no one cares much, they work somehow and its fine. Or there are just few of them…","fields":{"slug":"/deeplinks-no-brainer/"},"frontmatter":{"date":"September 06, 2017","title":"Deep links with no brainer","description":"Very often in my practice deep links were something that no one cares much, they work somehow and its fine. Or there are just few of them and its really not hard to maintain. But working for a long time on one product that targets several very different markets reveals all the importance of deep links in a long run. There are always requests from marketing teams to support new kind of deep link for a new marketing campaign, to open some new screen in the app from push notification, or with some specific parameters, when existing deep link can't be reused for what ever reason and you have to create yet another one for the same action. In the modern app there are also all kinds of different sources of urls that should act like a deep link to your app - universal links, push notifications, shortcut items etc."}},{"excerpt":"In Swift enums are much more powerful than we got used to in other languages. One of the features that makes them more interesting to use is…","fields":{"slug":"/swift-enums-with-associated-values-defaults/"},"frontmatter":{"date":"March 24, 2017","title":"Swift enums with associated values defaults","description":"In Swift enums are much more powerful than we got used to in other languages. One of the features that makes them more interesting to use is associated values - values that each instance of enum case can carry along with it. We can not have stored properties in the enum, so associated values is basically the only way to store additional data with enum value. Creating an enum value with associated value has a similar semantics as a method call. The difference is - we can not define defaults for parameters which represent associated values."}},{"excerpt":"With Xcode 8 Apple finally provided developers with first party API to develop plugin-like Xcode extensions, at the same time closing all…","fields":{"slug":"/xcode-source-editor-extension-superpowered-with-sourcekitten/"},"frontmatter":{"date":"February 19, 2017","title":"Xcode Source Editor Extension superpowered with SourceKitten","description":"With Xcode 8 Apple finally provided developers with first party API to develop plugin-like Xcode extensions, at the same time closing all the doors for in-process plugins. At this moment unfortunately we are provided with a very limited tools. We can only manipulate the content of currently selected file, have no (official) access to any project metadata and other sources. There are also no first-party tools for code analysis, so we have to parse the code manually. Luckily thanks to OSS community we have such projects as SourceKitten that fills this gap and gives us some foundation to build cool stuff on top of it. Usually though it's used as a framework as part of other tools, usually command line tools that are supposed to be run from a build step of your project, not in source editor extension. Is it even possible to use SourceKitten in Xcode extension? Let's try."}},{"excerpt":"This week there were a lot of articles around the web about React Native and its place in a current iOS dev ecosystem. I was also playing…","fields":{"slug":"/extending-native-code-with-javascriptcore/"},"frontmatter":{"date":"February 08, 2017","title":"Extending native code with JavaScriptCore","description":"This week there were a lot of articles around the web about React Native and its place in a current iOS dev ecosystem. I was also playing with JavaScript lately, but in somewhat different context - JavaScriptCore. JavaScriptCore is a really great way to make your apps extensible by your users. There are some cool live examples of awesome tools leveraging it."}},{"excerpt":"As Roy Marmelstein said in his recent presentation at dotSwift - we love to be excited. Can not agree more. When we read a blog post that…","fields":{"slug":"/going-back-to-the-roots/"},"frontmatter":{"date":"February 02, 2017","title":"Going back to the roots","description":"As Roy Marmelstein said in his recent presentation at dotSwift - we love to be excited. Can not agree more. When we read a blog post that describes the concept or architectural pattern that is somewhat new for us and feels exciting we tend to accept it as something good. We can go really far away this rote and sometimes we don't notice that we already have all the tools to solve the problems they address. For iOS developers this tool is a framework that we inevitably use every day - UIKit."}},{"excerpt":"Textual content is the essential part of any app and text handling in iOS has been improving through last years. Starting with iOS 7 we have…","fields":{"slug":"/adaptive-text-styles/"},"frontmatter":{"date":"January 19, 2017","title":"Adaptive text styles","description":""}},{"excerpt":"Every app has some kind of caching. Let's say our caching strategy is very simple: check if data is in the memory cache and return it if not…","fields":{"slug":"/inout-variables-with-side-effects/"},"frontmatter":{"date":"December 15, 2016","title":"Inout variables with side effects","description":"Every app has some kind of caching. Let's say our caching strategy is very simple: check if data is in the memory cache and return it, if not - make a network call and cache the result when it's done. For that you can write code that will probably look something like this... "}},{"excerpt":"It's already 2 years of Swift and its interoperability with Objective-C as well. When app extensions were released we've got a way to share…","fields":{"slug":"/objective-c-headers-in-swift-framework-custom-build-configurations/"},"frontmatter":{"date":"October 29, 2016","title":"Objective-C headers in Swift framework & custom build configurations","description":"It's already 2 years of Swift and its interoperability with Objective-C as well. When app extensions were released we've got a way to share our code across targets using frameworks. I used to build lots of frameworks since then, sometimes I even worked full-time just on frameworks. But as I had written almost none of Objective-C in around a year now and I've never dived deep enough in Swift and Objective-C interoperability in frameworks here is the lesson I had to learn hard this time."}},{"excerpt":"One of the strategies that we use at HelloFresh to reduce compile time, improve code reuse and overall codebase health is breaking our code…","fields":{"slug":"/frameworks-keychain-nscoding-and-swift/"},"frontmatter":{"date":"September 30, 2016","title":"Frameworks, Keychain, NSCoding and Swift","description":"One of the strategies that we use at HelloFresh to reduce compile time, improve code reuse and overall codebase health is breaking our code into frameworks. We've started with two core layers - domain and network. We broke these layers into four different frameworks: domain, generic API client, implementation of API client based on Alamofire and endpoints containing collections of requests that we can make to our API. Simply breaking these layers into frameworks already gave us a lot - it was easier to concentrate on particular parts of the code, define seams between them, cover them with tests and finally replace horrible legacy code that already started to bite us in the ass as we were moving forward with new features. And after few weeks when we started to work on the app extension we were able to reuse those frameworks."}},{"excerpt":"Recently I came across an article by Max Howell describing how he had setup PromiseKit project to use just a single target instead of a…","fields":{"slug":"/xcode-cross-platform-frameworks/"},"frontmatter":{"date":"August 18, 2016","title":"Xcode & cross-platform frameworks","description":"Recently I came across an article by Max Howell describing how he had setup PromiseKit project to use just a single target instead of a separate target for each platform. As I have a side-project framework I'm working on I was interested to try this setup. Here is what I've found out."}},{"excerpt":"This post is a part of the series about shapes recognition. This post is also available as a part of a playground. When drawing by hand…","fields":{"slug":"/douglas-peucker-algorithm/"},"frontmatter":{"date":"August 13, 2016","title":"Douglas-Peucker algorithm","description":"When drawing by hand, especially in a slow manner, we will get a lot of touch points and the resulting curve will contain lots of close points. Also we can not draw ideally, so resulting curve can contain artifacts like hooklet at the end of the curve, closed shapes can not be ideally closed. These artifacts are insignificant for recognizing a shape and only complicate calculations. To eliminate deviation from \"ideal\" curve there are different preprocessing algorithms that we can apply before proceeding to the next steps of shape recognition."}},{"excerpt":"This post is a part of the series about shapes recognition. This post is also available as a part of a playground. Naive implementation of…","fields":{"slug":"/freehand-drawing/"},"frontmatter":{"date":"July 31, 2016","title":"Freehand drawing","description":"Naive implementation of rendering user's freehand drawing is strait forward. We need to listen to touch events from view and construct the path appending lines to each subsequent point..."}},{"excerpt":"This post is a script of the talk that I've made on UIKonf'16. That was a first time for me to present on such a big conference and honestly…","fields":{"slug":"/dependency-injection-in-swift/"},"frontmatter":{"date":"May 28, 2016","title":"Dependency Injection (DI) in Swift","description":"This post is a script of the talk that I've made on UIKonf'16. That was a first time for me to present on such a big conference and honestly I'm not even close to a public speaker so you may enjoy just reading it more."}},{"excerpt":"There were few times already when I used this little-known feature of Swift in real code and it improved (in my opinion) readability a lot…","fields":{"slug":"/mixing-optional-binding-and-boolean-expressions/"},"frontmatter":{"date":"April 28, 2016","title":"Mixing optional binding and boolean expressions","description":"There were few times already when I used this little-known feature of Swift in real code and it improved (in my opinion) readability a lot and much better described the intention of the code."}},{"excerpt":"Today I was working on simple validators that we use for forms (backed by awesome Eureka) and had to implement validator that validates…","fields":{"slug":"/pattern-matching-vs-range-contains/"},"frontmatter":{"date":"April 14, 2016","title":"~= vs Range.contains(_:)","description":"Today I was working on simple validators that we use for forms (backed by awesome Eureka) and had to implement validator that validates string length. So I did it like this..."}},{"excerpt":"I definitely agree with those who say that you should not depend on code from external source (meaning where and how it is hosted). You…","fields":{"slug":"/on-package-managers/"},"frontmatter":{"date":"March 29, 2016","title":"On package managers","description":"My 5 cents on package managers."}},{"excerpt":"OS X developers are kind of rare developer species. I don't know about you but among my fellow developers there is only one who is doing OS…","fields":{"slug":"/creating-simple-os-x-app/"},"frontmatter":{"date":"March 24, 2016","title":"Creating a simple OS X app","description":""}},{"excerpt":"TL;DR - You can play with source code and example project here. Storyboards segues are very cool. They are very easy yet powerful. They help…","fields":{"slug":"/intermediate-action-segues/"},"frontmatter":{"date":"December 27, 2015","title":"Intermediate action segues","description":"Storyboards segues are very cool. They are very easy yet powerful. They help to incapsulate presentation logic and move it out from view controllers. And adaptive segues are state of the art. There is only one thing (almost) left if view controller..."}},{"excerpt":"In Objective-C it's very natural to have a property of type that also conforms to one or few protocols. In Swift that becomes tedious cause…","fields":{"slug":"/properties-of-types-conforming-to-protocols-in-swift/"},"frontmatter":{"date":"December 25, 2015","title":"Properties of types conforming to protocols in Swift","description":"In Objective-C it's very natural to have a property of type that also conforms to one or few protocols. In Swift that becomes tedious cause you can not simply combine types and protocols."}},{"excerpt":"Note (15.04.16): This post is updated to reflect some of the latest changes in Dip. In some of my previous posts I wrote about using…","fields":{"slug":"/dependency-injecinjection-with-dip/"},"frontmatter":{"date":"December 24, 2015","title":"Dependency injection with Dip","description":"In some of my previous posts I wrote about using dependency injection with Typhoon framework and described some internals of analogous pure-Swift framework called Dip. Here I want to illustrate how Dip can be used in a real project using the same example that I used before. Also this post will contain a sneak peak of some upcoming extensions of Dip."}},{"excerpt":"Note (15.04.16): This post is updated to reflect some of the latest changes in Dip. In my previous post I wrote about Dip, lightweight IoC…","fields":{"slug":"/ioc-container-in-swift-circular-dependencies-and-auto-injection/"},"frontmatter":{"date":"November 11, 2015","title":"IoC container in Swift. Circular dependencies and auto-injection","description":"In my previous post I wrote about Dip, lightweight IoC written in Swift. Here I would like to describe how some other of it's features were implemented. They are not yet available in original repo, but you can check them out in my fork. "}},{"excerpt":"Note (15.04.16): This post is updated to reflect some of the latest changes in Dip. In my previous post I talked about dependency injection…","fields":{"slug":"/ioc-container-in-swift/"},"frontmatter":{"date":"November 08, 2015","title":"IoC container in Swift","description":"In my previous post I talked about dependency injection framework for Objective-C called Typhoon. It's very easy to start to use it, yet it's very powerful (maybe even too much cause there are so much stuff you can do with it). But I'm here not to advocate Typhoon. It's the end of 2015 and there is Swift. Is there a way to do the same (well there are just too much stuff there in Typhoon so I mean only core IoC container functionality) in Swift way or are we doomed to stick to Objective-C?"}},{"excerpt":"In my previous post I described how you can break business and presentation logic in small PONSO's to achieve better separation of concerns…","fields":{"slug":"/view-controller-thinning-dependency-injection/"},"frontmatter":{"date":"October 27, 2015","title":"View controller thinning. Dependency injection with Typhoon.","description":"In my previous post I described how you can break business and presentation logic in small PONSO's to achieve better separation of concerns and think view controller. To wire up dependencies, particularly those PONSO instances with view elements and actions I heavily used Interface Builder. In this post I will show how you can do the same using IoC-container instead of Interface Builder. As example of such IoC container implementation I will use Typhoon framework. To checkout the full code you can use this repo."}},{"excerpt":"In previous post I showed how you can move some presentation logic from view controller to view. Now view controller is responsible only for…","fields":{"slug":"/view-controller-thinning-behaviours-and-interface-builder/"},"frontmatter":{"date":"October 10, 2015","title":"View controller thinning. Behaviors and Interface Builder.","description":"In previous post I showed how you can move some presentation logic from view controller to view. Now view controller is responsible only for business logic, in this case making login request and handling its result. But now you would say: \"You just moved presentation logic from controller to view. Now you have Massive View!\" And you will be right. Though view is a perfect place for presentation logic that leads to that view should know everything about its subviews and it will probably change when we change something in its subviews. So in this post I will show how to make view a little bit less aware of its subviews details and how to isolate business logic from everything else."}},{"excerpt":"In my previous post you could see that I've used ColorTheme and ThemedView protocol to easily customize view appearance. Though that…","fields":{"slug":"/view-themes/"},"frontmatter":{"date":"October 03, 2015","title":"View themes","description":"In my previous post you could see that I've used `ColorTheme` and `ThemedView` protocol to easily customize view appearance. Though that solution works I was not satisfied with it from very beginning. Here I try to find another solution."}},{"excerpt":"\"Massive view controller\" is one of the most favorite topic for iOS developers when they talk about architecture. A lot have been said on…","fields":{"slug":"/view-controller-thinning/"},"frontmatter":{"date":"September 26, 2015","title":"View controller thinning","description":"\"Massive view controller\" is one of the most favorite topic for iOS developers when they talk about architecture. A lot have been said on this topic already, even more will be said in future cause unfortunately there is no silver bullet and view controller still stay massive in many projects. Recently Andy Matuschak presented here and there a live coding session on this topic. So you can see it's a well know and still actual problem."}},{"excerpt":"When it comes to dependency management in Cocoa world you have three options: Cocoapods Carthage Don's use dependency management First one…","fields":{"slug":"/path-to-carthage-real-life-experience/"},"frontmatter":{"date":"September 21, 2015","title":"Path to Carthage. Real-life experience.","description":" "}},{"excerpt":"Recently I've updated my post on how you can implement lightweight networking in Objective-C. Now it's time to look at the same problem from…","fields":{"slug":"/networking-in-swift/"},"frontmatter":{"date":"September 10, 2015","title":"Networking in Swift","description":"Recently I've updated my post on how you can implement lightweight networking in Objective-C. Now it's time to look at the same problem from perspective of Swift."}},{"excerpt":"AFNetworking is the most popular networking library for iOS. Chances are high that it's the first pod you add to your Podfile. It's used as…","fields":{"slug":"/networking-use-case/"},"frontmatter":{"date":"August 15, 2015","title":"Lightweight networking in Objective-C","description":"AFNetworking is the most popular networking library for iOS. Chances are high that it's the first pod you add to your Podfile. It's used as a standalone network layer and as a part of some other frameworks, like RestKit. For me it has earned it's popularity for few reasons. It's well maintained, what is very important for open source project (thought it still has long living issues). And it has well thought architecture and interface, so it is easy to use and extend to your needs."}},{"excerpt":"Here is a small presentation that I've made about two weeks ago for our Wire team that provides some overview of Sync Engine testing (by…","fields":{"slug":"/testing-sync-engine/"},"frontmatter":{"date":"July 30, 2015","title":"Testing Sync Engine","description":"Here is a small presentation that I've made about two weeks ago for our Wire team that provides some overview of Sync Engine testing (by Sync Engine we call our in-house framework that does all networking and data base management). It covers main problems we have to solve and what we still have to do and how we plan to do it. If you want dive deep in code and know i.e. how we deal with Core Data in our tests - checkout this great article for objc.io by Daniel Eggert."}},{"excerpt":"This year I was lucky enougth to go to WWDC as part of Wire team. For me the most exciting stuff Apple introduced this year was Swift 2. I…","fields":{"slug":"/swift-2-part-1-2/"},"frontmatter":{"date":"June 28, 2015","title":"Swift 2. Part 1.","description":"This year I was lucky enougth to go to WWDC as part of Wire team. For me the most exciting stuff Apple introduced this year was Swift 2. I went almost to every session about programming languages, ignoring watchOS sessions and games completely. Though the main inspiration I've got from WWDC was to learn game development using Apple tools, like new GameKit. But that's not the point of this post."}},{"excerpt":"or What Swift Language Guide do not tell you. This post contains the list of interesting features of Swift that I find while using it. To…","fields":{"slug":"/swift-interesting-features/"},"frontmatter":{"date":"April 19, 2015","title":"Swift interesting features","description":"or What Swift Language Guide do not tell you."}},{"excerpt":"In this article I want to describe how I developed custom UITextView component in Swift using TextKit, Playgrounds and IBDesignable and…","fields":{"slug":"/custom-uitextview-in-swift/"},"frontmatter":{"date":"April 04, 2015","title":"Custom UITextView in Swift","description":"In this article I want to describe how I developed custom UITextView component in Swift using TextKit, Playgrounds and IBDesignable and IBInspectable directives."}},{"excerpt":"Probably lately you've seen few posts on this subject like this or that. Both of described techiques share the same secret - how playground…","fields":{"slug":"/quick-overview-of-swift-playgrounds-in-ios-simulator/"},"frontmatter":{"date":"March 16, 2015","title":"Quick overview of Swift Playgrounds in iOS Simulator","description":"Probably lately you've seen few posts on this subject like this or that. Both of described techiques share the same secret - how playground is run in Simulator. Actually it's quite easy, but not obviouse as all windows needed for that are hidden by default."}},{"excerpt":"This is quiet interesting XCode feature I was not aware of until last week. Maybe you will find it not so interesting and definitely will…","fields":{"slug":"/info-plist-preprocessing/"},"frontmatter":{"date":"December 13, 2014","title":"Info.plist preprocessing","description":"This is quiet interesting XCode feature I was not aware of until last week. Maybe you will find it not so interesting and definitely will not use this on everyday basis but sometimes it can be helpfull. For example it can be convenient for separation of production and test configurations (some of them)."}},{"excerpt":"Recently here at Rambler&Co mobile team we decided to try technique of storyboards segregation (separation in other words). We came to the…","fields":{"slug":"/ios-storyboards-segregation/"},"frontmatter":{"date":"December 08, 2014","title":"iOS storyboards segregation","description":"Recently here at Rambler&Co mobile team we decided to try technique of storyboards segregation (separation in other words). We came to the conclusion that this simple technique together with other techniques we use can help us to improve our's projects architecture, code readability and stability. Here is what we came up with."}}]}},"pageContext":{}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}