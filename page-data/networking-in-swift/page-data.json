{"componentChunkName":"component---src-templates-blog-post-js","path":"/networking-in-swift/","result":{"data":{"site":{"siteMetadata":{"title":"Ilya Puchka","siteUrl":"https://ilya.puchka.me"}},"markdownRemark":{"id":"94d42739-f08d-5013-9ea7-113cb2b98fc7","excerpt":"Recently I've updated my post on how you can implement lightweight networking in Objective-C. Now it's time to look at the same problem from perspective ofâ€¦","html":"<p>Recently I've updated my post on how you can implement lightweight networking in Objective-C. Now it's time to look at the same problem from perspective of Swift. If you want to check out code right away you can do it on <a href=\"https://github.com/ilyapuchka/SwiftNetworking\">Github</a>.</p>\n<p>As AFNetowrking is the default tool of choice for most of Objective-C developers, <a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a> became such in Swift community. But it's always useful to practice and find your own solutions. So let's look how we can do networking by ourselves and what we can achieve there using powerful Swift features like generics, structs and enums.</p>\n<h4>Endpoints</h4>\n<p>When you make HTTP request you reach some endpoint or resource on the remote server. This endpoint describes HTPP method you can use to access it, path of the resource, query parameters. We can minimally describe endpoint using protocol:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">Endpoint</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> path<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> method<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HTTPMethod</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are limited number of endpoints that any API can provide. Enum will be the best way to implement <code>Endpoint</code> protocol. Let's say you have some blog platform API that provides endpoints for posts. Your endpoints enum can look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PostsEndpoint</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Endpoint</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">GetPosts</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">GetPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">AddPost</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">UpdatePost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">DeletePost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> path<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">GetPosts</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"posts/\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">GetPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"posts/</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">id</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">/\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">AddPost</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"posts/\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">UpdatePost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"posts/</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">id</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">/\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">DeletePost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"posts/</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">id</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">/\"</span></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> method<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HTTPMethod</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">GetPosts</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">GetPost</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">AddPost</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">UpdatePost</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token constant\">PUT</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">DeletePost</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>HTTP methods and headers</h4>\n<p>HTTP method can be also easily described by enum:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">HTTPMethod</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">GET</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"GET\"</span></span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">POST</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"POST\"</span></span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">PUT</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"PUT\"</span></span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"DELETE\"</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Different APIs can have different custom HTTP headers. Still we can define them as enum providing some standard values and ability to set custom header with arbitrary key and value.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">typealias</span> <span class=\"token class-name\">MIMEType</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">HTTPHeader</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">ContentDisposition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">MIMEType</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">ContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MIMEType</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccessToken</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Custom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">var</span> key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">ContentDisposition</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Content-Disposition\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Accept</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Accept\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">ContentType</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Content-Type\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Authorization\"</span></span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Custom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key<span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> key\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> requestHeaderValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">ContentDisposition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> disposition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> disposition\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> types<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\", \"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>types<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">ContentType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> type\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">.</span>requestHeaderValue\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Custom</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">setRequestHeader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSMutableURLRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>requestHeaderValue<span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Requests and responses</h4>\n<p>Before we move to describing requests and responses we need to define some helper protocols that will help us to construct requests with arbitrary data and deserialize response data.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">APIRequestDataEncodable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">encodeForAPIRequestData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NSData</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">APIResponseDecodable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>apiResponseData<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSData</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First protocol <code>APIRequestDataEncodable</code> defines function that will be used to convert arbitrary object to <code>NSData</code> for request body. <code>APIResponseDecodable</code> defines failable initializer to initialize object using response data.</p>\n<p>Now using all these abstractions we can describe HTTP request. All we need to describe request is it's endpoint, base url (let's say you have production and development environments of your API with different domains), headers and query. Each request have different type of data that we expect in response. To abstract it we will use generic <code>ResultType</code>. Also request can be created with some input object. In this case this input object should conform to <code>APIRequestDataEncodable</code> so that we can encode it to body data without knowing any of its details. Finally we can define basic interface of request so that we can i.e. put them in array<sup>1</sup> or access its basic properties without caring about its generic type of result.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">APIRequestType</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSData</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> endpoint<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Endpoint</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">NSURL</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">HTTPHeader</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseDecodable</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestType</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> body<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSData</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> endpoint<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Endpoint</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">NSURL</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">HTTPHeader</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Endpoint</span><span class=\"token punctuation\">,</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">NSURL</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">HTTPHeader</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>endpoint <span class=\"token operator\">=</span> endpoint\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> baseURL\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>query <span class=\"token operator\">=</span> query\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> headers\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Endpoint</span><span class=\"token punctuation\">,</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">NSURL</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestDataEncodable</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">HTTPHeader</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>endpoint <span class=\"token operator\">=</span> endpoint\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> baseURL\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>query <span class=\"token operator\">=</span> query\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> headers\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">encodeForAPIRequestData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Response object is even simpler. Basically it should incapsulate HTTP response, it's data, error, original request and content type. We also can constrain it with generic type of its data so that <code>APIRequestFor</code> can be used only with <code>APIResponseOf</code> with the same generic result type.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">APIResponse</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">var</span> httpResponse<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSHTTPURLResponse</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSData</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> error<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ErrorType</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> originalRequest<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLRequest</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> contentType<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MIMEType</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseDecodable</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponse</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> httpResponse<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSHTTPURLResponse</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSData</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> originalRequest<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLRequest</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">internal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> error<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ErrorType</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">internal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ResultType</span><span class=\"token operator\">?</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLRequest</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSData</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> httpResponse<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLResponse</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ErrorType</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>originalRequest <span class=\"token operator\">=</span> request\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>httpResponse <span class=\"token operator\">=</span> httpResponse <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">NSHTTPURLResponse</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> error\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Serialization and deserialization</h4>\n<p>Now let's define some additional classes that will serialize requests and deserialize responses.</p>\n<p>First thing we need is to process request. Request processor will take <code>APIRequestType</code> as input and will produce <code>NSMutableURLRequest</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">APIRequestProcessing</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">processRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestType</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NSMutableURLRequest</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultAPIRequestProcessing</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestProcessing</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> defaultHeaders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">HTTPHeader</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>defaultHeaders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">HTTPHeader</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>defaultHeaders <span class=\"token operator\">=</span> defaultHeaders\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">processRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestType</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NSMutableURLRequest</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> components <span class=\"token operator\">=</span> <span class=\"token class-name\">NSURLComponents</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>endpoint<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n        components<span class=\"token punctuation\">.</span>queryItems <span class=\"token operator\">=</span> <span class=\"token class-name\">NSURLQueryItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">queryItems</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> components<span class=\"token punctuation\">.</span><span class=\"token class-name\">URLRelativeToURL</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>baseURL<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token class-name\">NSError</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">BadRequest</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">let</span> httpRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">NSMutableURLRequest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span>\n        httpRequest<span class=\"token punctuation\">.</span><span class=\"token class-name\">HTTPMethod</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>endpoint<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>rawValue\n        httpRequest<span class=\"token punctuation\">.</span><span class=\"token class-name\">HTTPBody</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n        <span class=\"token keyword\">for</span> header <span class=\"token keyword\">in</span> defaultHeaders <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span>headers <span class=\"token punctuation\">{</span>\n            header<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> httpRequest\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that input argument is not <code>APIRequestFor</code> but <code>APIRequestType</code>. While building HTTP request we don't care about type of the result, but if we would use <code>APIRequestFor</code> we would have to make processing method generic as well.</p>\n<p>To process response data we need another class that will return complete <code>APIResponseOf</code> based on <code>partial</code> response built from data provided by <code>NSURLSession</code> callbacks.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">APIResponseProcessing</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">processResponse</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultAPIResponseProcessing</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseProcessing</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">processResponse</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            response<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> error\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> response\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">validate</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token function\">validateError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span> <span class=\"token function\">validateHTTPResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span> <span class=\"token function\">validateStatusCode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span> <span class=\"token function\">validateContentType</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">validateError</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>error <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> error\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">validateHTTPResponse</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>httpResponse <span class=\"token operator\">==</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token class-name\">NSError</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">InvalidResponse</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">validateStatusCode</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> <span class=\"token class-name\">NSError</span><span class=\"token punctuation\">.</span><span class=\"token function\">backendError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>httpResponse<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> error\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">validateContentType</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> contentType <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>contentType <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">Accept</span><span class=\"token punctuation\">(</span>acceptable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">.</span>headers <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>acceptable<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">NSError</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token class-name\">InvalidResponse</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">decode</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ResultType</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">ResultType</span><span class=\"token punctuation\">(</span>apiResponseData<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we first validate partial response on errors, status code and content type and then try to create <code>ResultType</code> instance from response data using it's failable initializer. Note that here we need to use generic methods 'cause we need to provide result type for <code>APIResponseOf</code> somehow.</p>\n<h4>Client</h4>\n<p>Last thing we need is \"API client\", the object that provides API to make requests. In simplest case it can be a minimal wrapper of <code>NSURLSession</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">APIClient</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">NSURL</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> session<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLSession</span>\n\n    <span class=\"token keyword\">let</span> requestProcessing<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestProcessing</span>\n    <span class=\"token keyword\">let</span> responseProcessing<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseProcessing</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">NSURL</span><span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLSession</span><span class=\"token punctuation\">,</span> requestProcessing<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestProcessing</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultAPIRequestProcessing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> responseProcessing<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseProcessing</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">DefaultAPIResponseProcessing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> baseURL\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> session\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>requestProcessing <span class=\"token operator\">=</span> requestProcessing\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>responseProcessing <span class=\"token operator\">=</span> responseProcessing\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">request</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NSURLSessionTask</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> task<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLSessionTask</span><span class=\"token operator\">?</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>requestProcessing<span class=\"token punctuation\">.</span><span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n            task <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">dataTaskWithRequest</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">,</span> completionHandler<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span> <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">completeRequest</span><span class=\"token punctuation\">(</span>task<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">,</span> completionHandler<span class=\"token punctuation\">:</span> completion<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            task<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cancelRequestWithError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> completionHandler<span class=\"token punctuation\">:</span> completion<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> task\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">completeRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLRequest</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSData</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSURLResponse</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSError</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> completionHandler<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">var</span> apiResponse <span class=\"token operator\">=</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> task<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>originalRequest<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span> httpResponse<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">)</span>\n        apiResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>responseProcessing<span class=\"token punctuation\">.</span><span class=\"token function\">processResponse</span><span class=\"token punctuation\">(</span>apiResponse<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span><span class=\"token function\">dispatch_get_main_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">completionHandler</span><span class=\"token punctuation\">(</span>apiResponse<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">cancelRequestWithError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ErrorType</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> httpResponse<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">,</span> completionHandler<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ResultType</span><span class=\"token operator\">></span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span><span class=\"token function\">dispatch_get_main_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">completionHandler</span><span class=\"token punctuation\">(</span>apiResponse<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here <code>APIClient</code> tries to build HTTP request from <code>APIRequestFor</code> and creates <code>NSURLSessionTask</code> from it. In it's completion handler it process response data to instance of <code>APIResponseOf</code> and pass it to caller. If HTTP request fails to build caller will receive a callback with response that will contain error thrown on creating request.</p>\n<p>To use this client you can extend it providing methods to access particular resources. For example to request posts you can create following method:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">PostsAPI</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">posts</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Posts</span><span class=\"token operator\">></span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NSURLSessionTask</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">APIClient</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">PostsAPI</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">posts</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">APIResponseOf</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Posts</span><span class=\"token operator\">></span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NSURLSessionTask</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> apiRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">APIRequestFor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Posts</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PostsEndpoint</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">GetPosts</span><span class=\"token punctuation\">,</span> baseURL<span class=\"token punctuation\">:</span> baseURL<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>apiRequest<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> completion<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>In this post I showed one of the ways how you can create your own network layer using Swift and it's features like generics, protocols, structs and enums. With generics there is actually no way for client to mess up with types of response data. And by separating requests and response processing to separate objects we provide clients of our code chance to change this behavior adding some additional logic.<br>\nOf course in real life you should think twice before you decide to implement such thing as network layer yourself or use existing frameworks like Alamofire. My advice is to take advantage of open source community work and use reliable and popular frameworks in your production code. But you must understand how they work, investigate their source code. It should not be black box for you and you can even learn from it. Implementing same functionality by yourself will help you to understand how they work and probably why they were build this way and possibly how they can be improved.</p>\n<p>You can check out source code for this posts (with some improvements for tasks management and request signing) on <a href=\"https://github.com/ilyapuchka/SwiftNetworking\">Github</a>.</p>\n<hr>\n<ol>\n<li>The problem is that you can not put generic types in Swift collections, cause there are also generic and require all items to have the same type defined at compile time. For instance <code>APIRequestFor&#x3C;Posts></code> and <code>APIRequestFor&#x3C;Users></code> are different types, though they both are <code>APIRequestFor</code> instances. You can not define <code>Array&#x3C;APIRequestFor></code> cause <code>APIRequestFor</code> requires it's ResultType, and you can not use <code>Array&#x3C;APIRequestFor&#x3C;AnyObject>></code> or <code>Array&#x3C;APIRequestFor&#x3C;Any>></code>. But you can use <code>Array&#x3C;APIRequestType></code>, though you will lose information about ResultType of each request. â†©ï¸Ž</li>\n</ol>","fields":{"slug":"/networking-in-swift/"},"frontmatter":{"id":"5b6f5a3a9d28c70f0f015f65","title":"Networking in Swift","date":"September 10, 2015","description":"Recently I've updated my post on how you can implement lightweight networking in Objective-C. Now it's time to look at the same problem from perspective of Swift.","tags":"Swift"}},"previous":{"excerpt":"AFNetworking is the most popular networking library for iOS. Chances are high that it's the first pod you add to your Podfile. It's used as a standalone networkâ€¦","fields":{"slug":"/networking-use-case/"},"frontmatter":{"title":"Lightweight networking in Objective-C","date":"August 15, 2015"}},"next":{"excerpt":"When it comes to dependency management in Cocoa world you have three options: Cocoapods Carthage Don's use dependency management First one, Cocoapods, have beenâ€¦","fields":{"slug":"/path-to-carthage-real-life-experience/"},"frontmatter":{"title":"Path to Carthage. Real-life experience.","date":"September 21, 2015"}}},"pageContext":{"id":"94d42739-f08d-5013-9ea7-113cb2b98fc7","previousPostId":"8e8346c2-9893-5cec-81f0-e2c1b1b63196","nextPostId":"d8288d2a-734e-56d4-bdcb-3a150899aa92"}},"staticQueryHashes":["2355076697","2841359383"],"slicesMap":{}}